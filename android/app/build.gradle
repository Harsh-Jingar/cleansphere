apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

// Add this block to load environment variables from .env file
project.ext.envConfigFiles = [
    debug: ".env",
    release: ".env",
]

project.ext.react = [
    enableHermes: false
]

react {
    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = false

def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

// Helper function to get API key from .env file
def getEnvVariable = { key ->
    def envFile = project.ext.envConfigFiles[project.ext.envConfigFiles.debug]
    def envVars = new Properties()
    def envFile_obj = rootProject.file(envFile)
    if (envFile_obj.exists()) {
        envVars.load(new FileInputStream(envFile_obj))
        return envVars.getProperty(key)
    }
    return System.getenv(key) ?: ""
}

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.cleansphere"
    defaultConfig {
        applicationId "com.cleansphere"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        
        // Add Google Maps API key from .env file
        resValue "string", "google_maps_api_key", getEnvVariable("GOOGLE_MAPS_API_KEY")
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation "com.google.android.gms:play-services-auth:20.5.0"
    // Add Google Play Services Location dependency
    implementation "com.google.android.gms:play-services-location:21.0.1"
    // React Native Vector Icons
    implementation project(':react-native-vector-icons')
}

// Copy icon fonts during build
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
